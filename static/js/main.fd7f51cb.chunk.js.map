{"version":3,"sources":["components/Search/Search.tsx","components/Main/Main.tsx","constants/api.ts","components/App/App.tsx","index.tsx"],"names":["Search","setCurrentCity","buttonColor","useState","city","setCity","placeholder","setPlaceholder","emptyInput","setEmptyInput","handleButtonClick","trim","className","type","value","onChange","e","length","target","onClick","onKeyPress","key","style","borderColor","backgroundColor","Main","data","temperature","tempType","setTempType","changeTempType","preventDefault","currentTarget","textContent","getFahrenheitTemp","temp","Math","round","main","backgroundImage","country","sys","console","log","toLowerCase","countryImg","name","weather","icon","feels_like","temp_min","temp_max","wind","speed","clouds","all","humidity","API","KEY","process","App","currentCity","setData","latitude","setLat","longitude","setLon","setButtonColor","useEffect","navigator","geolocation","getCurrentPosition","position","coords","lat","lon","fetch","then","json","res","catch","error","fetchDataByCity","num","dynamicColor","document","body","setProperty","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fd7f51cb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './style.scss';\n\ntype Props = {\n  setCurrentCity: (arg: string) => void,\n  buttonColor: string,\n};\n\nconst Search: React.FC<Props> = ({ setCurrentCity, buttonColor }) => {\n  const [city, setCity] = useState('');\n  const [placeholder, setPlaceholder] = useState(\"Weather in your city\");\n  const [emptyInput, setEmptyInput] = useState(false);\n\n  const handleButtonClick = () => {\n    if (city.trim() === \"\") {\n      setPlaceholder('')\n      setEmptyInput(true);\n    } else {\n      setCurrentCity(city);\n      setPlaceholder('Weather in your city');\n    }\n  };\n\n  const handleInputClick = () => {\n    if (city.length === 0) {\n      setPlaceholder('Weather in your city');\n      setEmptyInput(false);\n    }\n  };\n\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (city.length === 0) {\n      setPlaceholder('Weather in your city');\n      setEmptyInput(false);\n    }\n\n    setCity(e.target.value);\n  };\n\n  const handleKeyPress = (e: any) => {\n    if (city.trim().length === 0) {\n      setPlaceholder('')\n      setEmptyInput(true);\n    }\n\n    if (e.key === 'Enter') {\n      handleButtonClick();\n    }\n  }\n\n  return (\n    <div className=\"search\">\n      <div className=\"search__container\">\n        <label>\n          <input\n            type=\"text\"\n            placeholder={placeholder}\n            value={city}\n            onChange={handleInputChange}\n            onClick={handleInputClick}\n            className=\"search__input\"\n            onKeyPress={handleKeyPress}\n            style={{\n              borderColor: buttonColor,\n            }}\n          />\n          <p className=\"search__warning\">\n            {emptyInput && (\n              'Please write your city'\n            )}\n          </p>\n          \n        </label>\n        <button\n          type=\"button\"\n          className=\"search__btn\"\n          onClick={handleButtonClick}\n          style={{\n            backgroundColor: buttonColor,\n            borderColor: buttonColor,\n          }}\n        >\n          Search\n        </button>\n      </div>\n\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState } from 'react';\nimport './style.scss'\n\ntype Props = {\n  data: Data,\n  temperature: (num: number) => number,\n  buttonColor: string,\n};\n\nconst Main: React.FC<Props> = ({ data, temperature, buttonColor }) => {\n  const [tempType, setTempType] = useState('C');\n\n  const countryImg = (country: string) => {\n    if (data.sys) {\n      console.log(data)\n      return country.toLowerCase();\n    }\n  };\n\n  const changeTempType = (e: any) => {\n    e.preventDefault()\n    setTempType(e.currentTarget.textContent);\n  };\n\n  const getFahrenheitTemp = (temp: number) => {\n    return Math.round((temp - 273.15) * 9 / 5 + 32);\n  };\n\n  return (\n    <>\n      {data.main ? (\n        <div className=\"main-content\">\n          <div className=\"title\">\n            <div className=\"title__country-img\" style={{\n              backgroundImage: `url('https://openweathermap.org/images/flags/${countryImg(data.sys.country)}.png')`\n            }}>\n            </div>\n            <h2 className=\"title__text\">\n              {data.name}, {data.sys.country}\n            </h2>\n          </div>\n          <div className=\"main-container\">\n            <div className=\"temperature\">\n              <div className=\"temperature__image\" style={{\n                backgroundImage: `url('https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png')`\n              }}></div>\n              <h3 className=\"temperature__value width\">\n                {tempType === 'C' ? (\n                  `${temperature(data.main.temp)} ${tempType}`\n                ) : (\n                  `${getFahrenheitTemp(data.main.temp)} ${tempType}`\n                )}\n              </h3>\n              <button\n                type=\"button\"\n                className=\"temperature__button temperature__button--left\"\n                onClick={changeTempType}\n                style={{\n                  borderColor: buttonColor,\n                }}\n              >\n                C\n              </button>\n              <button\n                type=\"button\"\n                className=\"temperature__button temperature__button--right\"\n                onClick={changeTempType}\n              >\n                F\n              </button>\n            </div>\n          </div>\n          <div className=\"info\">\n            <div className=\"left-side-info\">\n              <div className=\"info__wrap\">\n                <h4 className=\"info__text\">\n                  Feels like: <span className=\"width\">\n                    {tempType === 'C' ? (\n                      `${temperature(data.main.feels_like)} C`\n                    ) : (\n                      `${getFahrenheitTemp(data.main.feels_like)} F`\n                    )}\n                  </span>\n                </h4>\n              </div>\n              <div className=\"info__wrap\">\n                <h4 className=\"info__text\">\n                  min-temperature: {tempType === 'C' ? (\n                    `${temperature(data.main.temp_min)} C`\n                  ) : (\n                    `${getFahrenheitTemp(data.main.temp_min)} F`\n                  )}\n                </h4>\n              </div>\n              <div className=\"info__wrap\">\n                <h4 className=\"info__text\">\n                  max-temperature: {tempType === 'C' ? (\n                    `${temperature(data.main.temp_max)} C`\n                  ) : (\n                    `${getFahrenheitTemp(data.main.temp_max)} F`\n                  )}\n                </h4>\n              </div>\n            </div>\n\n            <div className=\"rigth-side-info\">\n              <div className=\"info-wrap\">\n                <h4 className=\"info__text\">\n                  Wind speed: {data.wind.speed} m/s.\n                </h4>\n              </div>\n              <div className=\"info-wrap\">\n                <h4 className=\"info__text\">\n                  Clouds: {data.clouds.all} %\n                </h4>\n              </div>\n              <div className=\"info-wrap\">\n                <h4 className=\"info__text\">\n                  Humidity: {data.main.humidity} %\n                </h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n          <div className=\"error\">\n            City not found\n          </div>\n      )}\n    </>\n  );\n};\n\nexport default Main;\n","export const API = 'https://api.openweathermap.org/data/2.5';\nexport const KEY = process.env.REACT_APP_KEY;\n","import { useState, useEffect } from 'react';\nimport './style.scss';\nimport Search from '../Search/Search';\nimport Main from '../Main/Main';\nimport { API, KEY, } from '../../constants/api';\n\nconst App = () => {\n  const [currentCity, setCurrentCity] = useState('');\n  const [data, setData] = useState<Data | any>({});\n  const [latitude, setLat] = useState(0);\n  const [longitude, setLon] = useState(0);\n  const [buttonColor, setButtonColor] = useState('#fff');\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLon(position.coords.longitude);\n      setLat(position.coords.latitude);\n    });\n  }, [])\n\n  const fetchDataByCoords = (lat: number, lon: number) => {\n    fetch(`${API}/weather?lat=${lat}&lon=${lon}&appid=${KEY}`)\n      .then(data => data.json())\n      .then(res => setData(res))\n      .catch(error => console.log(error));\n  }\n\n  const fetchDataByCity = (currentCity: string) => {\n    fetch(`${API}/weather?q=${currentCity}&appid=${KEY}`)\n      .then(data => data.json())\n      .then(res => setData(res))\n      .catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    latitude && longitude && fetchDataByCoords(latitude, longitude);\n  }, [latitude, longitude]);\n\n  useEffect(() => {\n    currentCity && fetchDataByCity(currentCity);\n  }, [currentCity]);\n\n  const temperature = (num: number) => {\n    return Math.round(num - 273.15);\n  };\n\n  const dynamicColor = (temp: number) => {\n    return temp > 0 ? 70 - temp : 160 + temp;\n  };\n\n  useEffect(() => {\n    document.body.style.setProperty('transition', 'all, 0.3s')\n    if (data.main) {\n      if (temperature(data.main.temp) < -10) {\n        document.body.style.setProperty('background-color', '#00ffff');\n        setButtonColor('#00ffff')\n      } else if (temperature(data.main.temp) > 30) {\n        document.body.style.setProperty('background-color', '#ff8c00');\n        setButtonColor('#ff8c00');\n      } else {\n        document.body.style.setProperty('background-color', `hsl(${dynamicColor(temperature(data.main.temp))}, 100%, 50%)`)\n        setButtonColor(`hsl(${dynamicColor(temperature(data.main.temp))}, 100%, 50%)`);\n      }\n    }\n  }, [data]);\n\n  return (\n    <>\n      {data.main || currentCity ? (\n        <div className=\"page\">\n          <h1 className=\"page__title\">\n            WEATHER.\n          </h1>\n          <Search\n            setCurrentCity={setCurrentCity}\n            buttonColor={buttonColor}\n          />\n          <Main\n            data={data}\n            temperature={temperature}\n            buttonColor={buttonColor}\n          />\n        </div>\n      ) : (\n          <div className=\"loading\">Loading...</div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}